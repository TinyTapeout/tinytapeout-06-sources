// I2C start and stop condition detector. Outputs come one cycle after conditions end.
// Oversampling by at least 2x allows start/stop detection before addr/data begin.
// Typical I2C frequencies are 100 kHz and 400 kHz, faster modes are 1-5 MHz.
// DE1: 50 MHz, TT06: 50 MHz generated by RP2040
module I2C_Start_Stop_Detector(
	clk, 
	reset, 
	SDA, 
	SCL,
	start_detected, 
	stop_detected
);

	// Ports
	input logic clk, reset;
	input logic SDA, SCL;
	output logic start_detected, stop_detected;
	
	// Wires to monitor I2C signals for edges
	wire SDA_pos, SDA_neg, SCL_pos, SCL_neg;
	
	// Edge detectors
	Edge_Detector SDA_Detector (.clk, .reset, .in(SDA), .posedge_detected(SDA_pos), .negedge_detected(SDA_neg));
	Edge_Detector SCL_Detector (.clk, .reset, .in(SCL), .posedge_detected(SCL_pos), .negedge_detected(SCL_neg));
	
	// FSM states
	enum {idle, check_start, start, check_stop, stop} ps, ns;
	
	// State logic
	always_comb begin
		case(ps)
			idle: 			if (SDA_neg & SCL) 			ns = check_start;
							else if (SCL_pos & ~SDA)	ns = check_stop;
							else 						ns = idle;
			check_start:	if (SCL_neg)				ns = start;
							else if (SDA_pos)			ns = idle;
							else						ns = check_start;
			start:										ns = idle;
			check_stop:		if (SDA_pos)				ns = stop;
							else if (SCL_neg)			ns = idle;
							else						ns = check_stop;
			stop:										ns = idle;
			default: 									ns = idle;
		endcase
	end
	
	// State registers
	always_ff @(posedge clk) begin
		if (reset)
			ps <= idle;
		else
			ps <= ns;
	end
	
	// Output state
	assign start_detected = (ps == start);
	assign stop_detected = (ps == stop);

endmodule // I2C_Start_Stop_Detector
