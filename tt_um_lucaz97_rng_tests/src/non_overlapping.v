//------> ./rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.1_2/1049935 Production Release
//  HLS Date:       Sat Jun 10 10:53:51 PDT 2023
// 
//  Generated by:   lc4976@hansolo.poly.edu
//  Generated date: Wed Mar 27 18:44:42 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    non_overlapping_core
// ------------------------------------------------------------------


module non_overlapping_core (
  clk, rst_n, is_random_rsc_dat, is_random_triosy_lz, valid_rsc_dat, valid_triosy_lz,
      epsilon_rsc_dat, epsilon_triosy_lz
);
  input clk;
  input rst_n;
  output is_random_rsc_dat;
  output is_random_triosy_lz;
  output valid_rsc_dat;
  output valid_triosy_lz;
  input epsilon_rsc_dat;
  output epsilon_triosy_lz;


  // Interconnect Declarations
  reg is_random_rsci_idat;
  reg valid_rsci_idat;
  wire epsilon_rsci_idat;
  wire or_dcpl_2;
  wire mux_tmp;
  wire mux_tmp_1;
  wire mux_tmp_3;
  wire not_tmp_8;
  wire or_dcpl_7;
  reg [14:0] count_sva;
  wire [15:0] nl_count_sva;
  wire unequal_tmp_3;
  reg if_1_asn_itm;
  reg [3:0] skip_3_0_sva;
  reg reg_epsilon_triosy_obj_ld_cse;
  reg reg_shift_reg_1_cse;
  wire [8:0] W_obs_static_init_mux_1_cse;
  wire or_cse;
  reg if_1_asn_9_itm;
  reg if_1_asn_10_itm;
  reg if_1_asn_11_itm;
  reg if_1_asn_12_itm;
  reg if_1_asn_13_itm;
  reg if_1_asn_14_itm;
  reg shift_reg_0_sva;
  wire [3:0] skip_3_0_sva_dfm_mx0;
  reg [8:0] nu_3_sva;
  reg [8:0] nu_4_sva;
  reg [8:0] nu_2_sva;
  reg [8:0] nu_5_sva;
  reg [8:0] nu_1_sva;
  reg [8:0] nu_6_sva;
  reg [8:0] nu_0_sva;
  reg [8:0] nu_7_sva;
  reg [8:0] W_obs_sva;
  wire [8:0] nu_7_sva_dfm_mx0;
  wire [7:0] if_3_for_5_operator_9_false_operator_9_false_conc_2_9_2;
  wire [8:0] nl_if_3_for_5_operator_9_false_operator_9_false_conc_2_9_2;
  wire [7:0] if_3_for_6_operator_9_false_operator_9_false_conc_2_9_2;
  wire [8:0] nl_if_3_for_6_operator_9_false_operator_9_false_conc_2_9_2;
  wire [7:0] if_3_for_7_operator_9_false_operator_9_false_conc_2_9_2;
  wire [8:0] nl_if_3_for_7_operator_9_false_operator_9_false_conc_2_9_2;
  wire [7:0] if_3_for_8_operator_9_false_operator_9_false_conc_2_9_2;
  wire [8:0] nl_if_3_for_8_operator_9_false_operator_9_false_conc_2_9_2;
  wire [7:0] if_3_for_1_operator_9_false_operator_9_false_conc_2_9_2;
  wire [8:0] nl_if_3_for_1_operator_9_false_operator_9_false_conc_2_9_2;
  wire [7:0] if_3_for_2_operator_9_false_operator_9_false_conc_2_9_2;
  wire [8:0] nl_if_3_for_2_operator_9_false_operator_9_false_conc_2_9_2;
  wire [7:0] if_3_for_3_operator_9_false_operator_9_false_conc_2_9_2;
  wire [8:0] nl_if_3_for_3_operator_9_false_operator_9_false_conc_2_9_2;
  wire [7:0] if_3_for_4_operator_9_false_operator_9_false_conc_2_9_2;
  wire [8:0] nl_if_3_for_4_operator_9_false_operator_9_false_conc_2_9_2;
  wire [3:0] if_acc_tmp;
  wire [4:0] nl_if_acc_tmp;
  wire not_tmp_13;
  wire nand_6_cse;
  wire and_20_cse;

  wire nand_3_nl;
  wire[8:0] if_1_acc_nl;
  wire[9:0] nl_if_1_acc_nl;
  wire mux_18_nl;
  wire or_22_nl;
  wire or_20_nl;
  wire[14:0] and_2_nl;
  wire[17:0] operator_18_false_acc_nl;
  wire[18:0] nl_operator_18_false_acc_nl;
  wire[17:0] if_3_for_8_acc_nl;
  wire[20:0] nl_if_3_for_8_acc_nl;
  wire[17:0] if_3_for_5_mul_nl;
  wire signed [19:0] nl_if_3_for_5_mul_nl;
  wire[17:0] if_3_for_6_mul_nl;
  wire signed [19:0] nl_if_3_for_6_mul_nl;
  wire[17:0] if_3_for_1_mul_nl;
  wire signed [19:0] nl_if_3_for_1_mul_nl;
  wire[17:0] if_3_for_2_mul_nl;
  wire signed [19:0] nl_if_3_for_2_mul_nl;
  wire[17:0] if_3_for_3_mul_nl;
  wire signed [19:0] nl_if_3_for_3_mul_nl;
  wire[17:0] if_3_for_4_mul_nl;
  wire signed [19:0] nl_if_3_for_4_mul_nl;
  wire[17:0] if_3_for_7_mul_nl;
  wire signed [19:0] nl_if_3_for_7_mul_nl;
  wire[17:0] if_3_for_8_mul_nl;
  wire signed [19:0] nl_if_3_for_8_mul_nl;
  wire and_16_nl;
  wire or_3_nl;
  wire or_6_nl;
  wire mux_15_nl;
  wire and_18_nl;

  // Interconnect Declarations for Component Instantiations 
  ccs_out_v1 #(.rscid(32'sd1),
  .width(32'sd1)) is_random_rsci (
      .idat(is_random_rsci_idat),
      .dat(is_random_rsc_dat)
    );
  ccs_out_v1 #(.rscid(32'sd2),
  .width(32'sd1)) valid_rsci (
      .idat(valid_rsci_idat),
      .dat(valid_rsc_dat)
    );
  ccs_in_v1 #(.rscid(32'sd3),
  .width(32'sd1)) epsilon_rsci (
      .dat(epsilon_rsc_dat),
      .idat(epsilon_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) is_random_triosy_obj (
      .ld(reg_epsilon_triosy_obj_ld_cse),
      .lz(is_random_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) valid_triosy_obj (
      .ld(reg_epsilon_triosy_obj_ld_cse),
      .lz(valid_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) epsilon_triosy_obj (
      .ld(reg_epsilon_triosy_obj_ld_cse),
      .lz(epsilon_triosy_lz)
    );
  assign or_cse = (~(if_1_asn_9_itm & if_1_asn_10_itm & if_1_asn_11_itm & if_1_asn_12_itm
      & if_1_asn_13_itm & if_1_asn_14_itm & reg_shift_reg_1_cse & shift_reg_0_sva
      & epsilon_rsci_idat & (skip_3_0_sva_dfm_mx0==4'b0000))) | if_1_asn_itm;
  assign nand_6_cse = ~((count_sva[11:0]==12'b111111111111));
  assign nl_if_1_acc_nl = W_obs_sva + 9'b000000001;
  assign if_1_acc_nl = nl_if_1_acc_nl[8:0];
  assign W_obs_static_init_mux_1_cse = MUX_v_9_2_2(if_1_acc_nl, W_obs_sva, or_cse);
  assign and_20_cse = (count_sva[11:0]==12'b111111111111);
  assign nu_7_sva_dfm_mx0 = MUX_v_9_2_2(W_obs_static_init_mux_1_cse, nu_7_sva, nand_6_cse);
  assign unequal_tmp_3 = ~((count_sva==15'b111111111111111));
  assign nl_if_acc_tmp = skip_3_0_sva + 4'b1111;
  assign if_acc_tmp = nl_if_acc_tmp[3:0];
  assign and_16_nl = (skip_3_0_sva==4'b0000);
  assign skip_3_0_sva_dfm_mx0 = MUX_v_4_2_2(if_acc_tmp, skip_3_0_sva, and_16_nl);
  assign nl_if_3_for_5_operator_9_false_operator_9_false_conc_2_9_2 = conv_u2u_7_8(nu_4_sva[8:2])
      + 8'b11111111;
  assign if_3_for_5_operator_9_false_operator_9_false_conc_2_9_2 = nl_if_3_for_5_operator_9_false_operator_9_false_conc_2_9_2[7:0];
  assign nl_if_3_for_6_operator_9_false_operator_9_false_conc_2_9_2 = conv_u2u_7_8(nu_5_sva[8:2])
      + 8'b11111111;
  assign if_3_for_6_operator_9_false_operator_9_false_conc_2_9_2 = nl_if_3_for_6_operator_9_false_operator_9_false_conc_2_9_2[7:0];
  assign nl_if_3_for_7_operator_9_false_operator_9_false_conc_2_9_2 = conv_u2u_7_8(nu_6_sva[8:2])
      + 8'b11111111;
  assign if_3_for_7_operator_9_false_operator_9_false_conc_2_9_2 = nl_if_3_for_7_operator_9_false_operator_9_false_conc_2_9_2[7:0];
  assign nl_if_3_for_8_operator_9_false_operator_9_false_conc_2_9_2 = conv_u2u_7_8(nu_7_sva_dfm_mx0[8:2])
      + 8'b11111111;
  assign if_3_for_8_operator_9_false_operator_9_false_conc_2_9_2 = nl_if_3_for_8_operator_9_false_operator_9_false_conc_2_9_2[7:0];
  assign nl_if_3_for_1_operator_9_false_operator_9_false_conc_2_9_2 = conv_u2u_7_8(nu_0_sva[8:2])
      + 8'b11111111;
  assign if_3_for_1_operator_9_false_operator_9_false_conc_2_9_2 = nl_if_3_for_1_operator_9_false_operator_9_false_conc_2_9_2[7:0];
  assign nl_if_3_for_2_operator_9_false_operator_9_false_conc_2_9_2 = conv_u2u_7_8(nu_1_sva[8:2])
      + 8'b11111111;
  assign if_3_for_2_operator_9_false_operator_9_false_conc_2_9_2 = nl_if_3_for_2_operator_9_false_operator_9_false_conc_2_9_2[7:0];
  assign nl_if_3_for_3_operator_9_false_operator_9_false_conc_2_9_2 = conv_u2u_7_8(nu_2_sva[8:2])
      + 8'b11111111;
  assign if_3_for_3_operator_9_false_operator_9_false_conc_2_9_2 = nl_if_3_for_3_operator_9_false_operator_9_false_conc_2_9_2[7:0];
  assign nl_if_3_for_4_operator_9_false_operator_9_false_conc_2_9_2 = conv_u2u_7_8(nu_3_sva[8:2])
      + 8'b11111111;
  assign if_3_for_4_operator_9_false_operator_9_false_conc_2_9_2 = nl_if_3_for_4_operator_9_false_operator_9_false_conc_2_9_2[7:0];
  assign or_dcpl_2 = nand_6_cse | (~ (count_sva[14]));
  assign or_3_nl = (count_sva[13:12]!=2'b00);
  assign mux_tmp = MUX_s_1_2_2((~ and_20_cse), and_20_cse, or_3_nl);
  assign or_6_nl = (count_sva[13:12]!=2'b01);
  assign mux_tmp_1 = MUX_s_1_2_2((~ and_20_cse), and_20_cse, or_6_nl);
  assign mux_15_nl = MUX_s_1_2_2(and_20_cse, (~ and_20_cse), count_sva[13]);
  assign mux_tmp_3 = MUX_s_1_2_2(mux_15_nl, and_20_cse, count_sva[12]);
  assign and_18_nl = (count_sva[13:12]==2'b11);
  assign not_tmp_8 = MUX_s_1_2_2(and_20_cse, (~ and_20_cse), and_18_nl);
  assign or_dcpl_7 = nand_6_cse | (count_sva[14]);
  assign not_tmp_13 = ~(if_1_asn_9_itm & if_1_asn_10_itm & if_1_asn_11_itm & if_1_asn_12_itm
      & if_1_asn_13_itm & if_1_asn_14_itm & reg_shift_reg_1_cse & shift_reg_0_sva
      & epsilon_rsci_idat);
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      skip_3_0_sva <= 4'b1010;
    end
    else if ( (~((~(if_1_asn_9_itm & if_1_asn_10_itm & if_1_asn_11_itm & if_1_asn_12_itm
        & if_1_asn_13_itm & if_1_asn_14_itm & reg_shift_reg_1_cse & shift_reg_0_sva
        & epsilon_rsci_idat & (~ if_1_asn_itm))) & nand_6_cse)) | (skip_3_0_sva!=4'b0000)
        ) begin
      skip_3_0_sva <= MUX_v_4_2_2(skip_3_0_sva_dfm_mx0, 4'b1010, nand_3_nl);
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      W_obs_sva <= 9'b000000000;
    end
    else if ( and_20_cse | (~(if_1_asn_itm | mux_18_nl)) ) begin
      W_obs_sva <= MUX_v_9_2_2(9'b000000000, W_obs_static_init_mux_1_cse, nand_6_cse);
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      nu_4_sva <= 9'b000000000;
    end
    else if ( ~(mux_tmp | or_dcpl_2) ) begin
      nu_4_sva <= W_obs_static_init_mux_1_cse;
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      nu_5_sva <= 9'b000000000;
    end
    else if ( ~(mux_tmp_1 | or_dcpl_2) ) begin
      nu_5_sva <= W_obs_static_init_mux_1_cse;
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      nu_6_sva <= 9'b000000000;
    end
    else if ( ~(mux_tmp_3 | or_dcpl_2) ) begin
      nu_6_sva <= W_obs_static_init_mux_1_cse;
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      nu_7_sva <= 9'b000000000;
    end
    else if ( ~(not_tmp_8 | or_dcpl_2) ) begin
      nu_7_sva <= W_obs_static_init_mux_1_cse;
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      count_sva <= 15'b000000000000000;
      reg_epsilon_triosy_obj_ld_cse <= 1'b0;
      valid_rsci_idat <= 1'b0;
      is_random_rsci_idat <= 1'b0;
      if_1_asn_itm <= 1'b0;
      if_1_asn_9_itm <= 1'b0;
      if_1_asn_10_itm <= 1'b0;
      if_1_asn_11_itm <= 1'b0;
      if_1_asn_12_itm <= 1'b0;
      if_1_asn_13_itm <= 1'b0;
      if_1_asn_14_itm <= 1'b0;
      reg_shift_reg_1_cse <= 1'b0;
      shift_reg_0_sva <= 1'b0;
    end
    else begin
      count_sva <= nl_count_sva[14:0];
      reg_epsilon_triosy_obj_ld_cse <= 1'b1;
      valid_rsci_idat <= ~ unequal_tmp_3;
      is_random_rsci_idat <= (readslicef_18_1_17(operator_18_false_acc_nl)) & (~
          unequal_tmp_3);
      if_1_asn_itm <= if_1_asn_9_itm;
      if_1_asn_9_itm <= if_1_asn_10_itm;
      if_1_asn_10_itm <= if_1_asn_11_itm;
      if_1_asn_11_itm <= if_1_asn_12_itm;
      if_1_asn_12_itm <= if_1_asn_13_itm;
      if_1_asn_13_itm <= if_1_asn_14_itm;
      if_1_asn_14_itm <= reg_shift_reg_1_cse;
      reg_shift_reg_1_cse <= shift_reg_0_sva;
      shift_reg_0_sva <= epsilon_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      nu_3_sva <= 9'b000000000;
    end
    else if ( ~(not_tmp_8 | or_dcpl_7) ) begin
      nu_3_sva <= W_obs_static_init_mux_1_cse;
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      nu_2_sva <= 9'b000000000;
    end
    else if ( ~(mux_tmp_3 | or_dcpl_7) ) begin
      nu_2_sva <= W_obs_static_init_mux_1_cse;
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      nu_1_sva <= 9'b000000000;
    end
    else if ( ~(mux_tmp_1 | or_dcpl_7) ) begin
      nu_1_sva <= W_obs_static_init_mux_1_cse;
    end
  end
  always @(posedge clk) begin
    if ( ~ rst_n ) begin
      nu_0_sva <= 9'b000000000;
    end
    else if ( ~(mux_tmp | or_dcpl_7) ) begin
      nu_0_sva <= W_obs_static_init_mux_1_cse;
    end
  end
  assign nand_3_nl = ~(or_cse & nand_6_cse);
  assign or_22_nl = (if_acc_tmp!=4'b0000) | not_tmp_13;
  assign or_20_nl = (skip_3_0_sva!=4'b0000);
  assign mux_18_nl = MUX_s_1_2_2(not_tmp_13, or_22_nl, or_20_nl);
  assign and_2_nl = MUX_v_15_2_2(15'b000000000000000, count_sva, unequal_tmp_3);
  assign nl_count_sva  = and_2_nl + 15'b000000000000001;
  assign nl_if_3_for_5_mul_nl = $signed(({if_3_for_5_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_4_sva[1:0])})) * $signed(({if_3_for_5_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_4_sva[1:0])}));
  assign if_3_for_5_mul_nl = nl_if_3_for_5_mul_nl[17:0];
  assign nl_if_3_for_6_mul_nl = $signed(({if_3_for_6_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_5_sva[1:0])})) * $signed(({if_3_for_6_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_5_sva[1:0])}));
  assign if_3_for_6_mul_nl = nl_if_3_for_6_mul_nl[17:0];
  assign nl_if_3_for_1_mul_nl = $signed(({if_3_for_1_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_0_sva[1:0])})) * $signed(({if_3_for_1_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_0_sva[1:0])}));
  assign if_3_for_1_mul_nl = nl_if_3_for_1_mul_nl[17:0];
  assign nl_if_3_for_2_mul_nl = $signed(({if_3_for_2_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_1_sva[1:0])})) * $signed(({if_3_for_2_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_1_sva[1:0])}));
  assign if_3_for_2_mul_nl = nl_if_3_for_2_mul_nl[17:0];
  assign nl_if_3_for_3_mul_nl = $signed(({if_3_for_3_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_2_sva[1:0])})) * $signed(({if_3_for_3_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_2_sva[1:0])}));
  assign if_3_for_3_mul_nl = nl_if_3_for_3_mul_nl[17:0];
  assign nl_if_3_for_4_mul_nl = $signed(({if_3_for_4_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_3_sva[1:0])})) * $signed(({if_3_for_4_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_3_sva[1:0])}));
  assign if_3_for_4_mul_nl = nl_if_3_for_4_mul_nl[17:0];
  assign nl_if_3_for_7_mul_nl = $signed(({if_3_for_7_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_6_sva[1:0])})) * $signed(({if_3_for_7_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_6_sva[1:0])}));
  assign if_3_for_7_mul_nl = nl_if_3_for_7_mul_nl[17:0];
  assign nl_if_3_for_8_mul_nl = $signed(({if_3_for_8_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_7_sva_dfm_mx0[1:0])})) * $signed(({if_3_for_8_operator_9_false_operator_9_false_conc_2_9_2
      , (nu_7_sva_dfm_mx0[1:0])}));
  assign if_3_for_8_mul_nl = nl_if_3_for_8_mul_nl[17:0];
  assign nl_if_3_for_8_acc_nl = if_3_for_5_mul_nl + if_3_for_6_mul_nl + if_3_for_1_mul_nl
      + if_3_for_2_mul_nl + if_3_for_3_mul_nl + if_3_for_4_mul_nl + if_3_for_7_mul_nl
      + if_3_for_8_mul_nl;
  assign if_3_for_8_acc_nl = nl_if_3_for_8_acc_nl[17:0];
  assign nl_operator_18_false_acc_nl = conv_u2u_17_18(readslicef_18_17_1(if_3_for_8_acc_nl))
      + 18'b111111111111011001;
  assign operator_18_false_acc_nl = nl_operator_18_false_acc_nl[17:0];

  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [14:0] MUX_v_15_2_2;
    input [14:0] input_0;
    input [14:0] input_1;
    input  sel;
    reg [14:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_15_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input  sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [16:0] readslicef_18_17_1;
    input [17:0] vector;
    reg [17:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_18_17_1 = tmp[16:0];
  end
  endfunction


  function automatic [0:0] readslicef_18_1_17;
    input [17:0] vector;
    reg [17:0] tmp;
  begin
    tmp = vector >> 17;
    readslicef_18_1_17 = tmp[0:0];
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [17:0] conv_u2u_17_18 ;
    input [16:0]  vector ;
  begin
    conv_u2u_17_18 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    non_overlapping
// ------------------------------------------------------------------


module non_overlapping (
  clk, rst_n, is_random_rsc_dat, is_random_triosy_lz, valid_rsc_dat, valid_triosy_lz,
      epsilon_rsc_dat, epsilon_triosy_lz
);
  input clk;
  input rst_n;
  output is_random_rsc_dat;
  output is_random_triosy_lz;
  output valid_rsc_dat;
  output valid_triosy_lz;
  input epsilon_rsc_dat;
  output epsilon_triosy_lz;



  // Interconnect Declarations for Component Instantiations 
  non_overlapping_core non_overlapping_core_inst (
      .clk(clk),
      .rst_n(rst_n),
      .is_random_rsc_dat(is_random_rsc_dat),
      .is_random_triosy_lz(is_random_triosy_lz),
      .valid_rsc_dat(valid_rsc_dat),
      .valid_triosy_lz(valid_triosy_lz),
      .epsilon_rsc_dat(epsilon_rsc_dat),
      .epsilon_triosy_lz(epsilon_triosy_lz)
    );
endmodule


